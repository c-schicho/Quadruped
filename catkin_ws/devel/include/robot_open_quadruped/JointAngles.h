// Generated by gencpp from file robot_open_quadruped/JointAngles.msg
// DO NOT EDIT!


#ifndef ROBOT_OPEN_QUADRUPED_MESSAGE_JOINTANGLES_H
#define ROBOT_OPEN_QUADRUPED_MESSAGE_JOINTANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_open_quadruped
{
template <class ContainerAllocator>
struct JointAngles_
{
  typedef JointAngles_<ContainerAllocator> Type;

  JointAngles_()
    : lf()
    , rf()
    , lr()
    , rr()  {
    }
  JointAngles_(const ContainerAllocator& _alloc)
    : lf(_alloc)
    , rf(_alloc)
    , lr(_alloc)
    , rr(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lf_type;
  _lf_type lf;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rf_type;
  _rf_type rf;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lr_type;
  _lr_type lr;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rr_type;
  _rr_type rr;





  typedef boost::shared_ptr< ::robot_open_quadruped::JointAngles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_open_quadruped::JointAngles_<ContainerAllocator> const> ConstPtr;

}; // struct JointAngles_

typedef ::robot_open_quadruped::JointAngles_<std::allocator<void> > JointAngles;

typedef boost::shared_ptr< ::robot_open_quadruped::JointAngles > JointAnglesPtr;
typedef boost::shared_ptr< ::robot_open_quadruped::JointAngles const> JointAnglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_open_quadruped::JointAngles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_open_quadruped::JointAngles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_open_quadruped::JointAngles_<ContainerAllocator1> & lhs, const ::robot_open_quadruped::JointAngles_<ContainerAllocator2> & rhs)
{
  return lhs.lf == rhs.lf &&
    lhs.rf == rhs.rf &&
    lhs.lr == rhs.lr &&
    lhs.rr == rhs.rr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_open_quadruped::JointAngles_<ContainerAllocator1> & lhs, const ::robot_open_quadruped::JointAngles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_open_quadruped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_open_quadruped::JointAngles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_open_quadruped::JointAngles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_open_quadruped::JointAngles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_open_quadruped::JointAngles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_open_quadruped::JointAngles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_open_quadruped::JointAngles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_open_quadruped::JointAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6a98af594d0c3ce471d3f5de59a13a9";
  }

  static const char* value(const ::robot_open_quadruped::JointAngles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6a98af594d0c3ceULL;
  static const uint64_t static_value2 = 0x471d3f5de59a13a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_open_quadruped::JointAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_open_quadruped/JointAngles";
  }

  static const char* value(const ::robot_open_quadruped::JointAngles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_open_quadruped::JointAngles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] lf\n"
"float32[] rf\n"
"float32[] lr\n"
"float32[] rr\n"
;
  }

  static const char* value(const ::robot_open_quadruped::JointAngles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_open_quadruped::JointAngles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lf);
      stream.next(m.rf);
      stream.next(m.lr);
      stream.next(m.rr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointAngles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_open_quadruped::JointAngles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_open_quadruped::JointAngles_<ContainerAllocator>& v)
  {
    s << indent << "lf[]" << std::endl;
    for (size_t i = 0; i < v.lf.size(); ++i)
    {
      s << indent << "  lf[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lf[i]);
    }
    s << indent << "rf[]" << std::endl;
    for (size_t i = 0; i < v.rf.size(); ++i)
    {
      s << indent << "  rf[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rf[i]);
    }
    s << indent << "lr[]" << std::endl;
    for (size_t i = 0; i < v.lr.size(); ++i)
    {
      s << indent << "  lr[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lr[i]);
    }
    s << indent << "rr[]" << std::endl;
    for (size_t i = 0; i < v.rr.size(); ++i)
    {
      s << indent << "  rr[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_OPEN_QUADRUPED_MESSAGE_JOINTANGLES_H
